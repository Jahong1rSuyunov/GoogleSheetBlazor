@page "/google-auth-callback"
@using Google.Apis.Download;






<MudButton OnClick="@ConnectGoogleDrive" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
    <MudText>Sign In</MudText>
</MudButton>

<MudGrid>
    <MudItem xs="12">
        <MudItem Class="center" xs="6">
            <MudList Clickable="true">
                @foreach (var item in driveFolderFiles)
                {
                    <MudListItem Text="@(item.Name + " - " + item.Id)" OnClick="@((e) => GetFolderFiles(item.Id))" Icon="@Icons.Custom.Uncategorized.Folder" />

                }

                @foreach (var item in driveFiles)
                {
                    <MudListItem Text="@(item.Name + " - " + item.Id +" - " + item.MimeType)" OnClick="@((e) => DownloadFile(item.Id, item.MimeType))" Icon="@Icons.Custom.FileFormats.FileExcel" />
                }
            </MudList>
        </MudItem>
    </MudItem>
</MudGrid>


@code {

    private static string[] scopes = { DriveService.Scope.Drive };
    private static string ApplicationName = "DriveApi";
    private const string CRED_PATH = "token.json";

    private List<DriveFile> driveFiles = new();
    private List<DriveFile> driveFolderFiles = new();

    protected override async Task OnInitializedAsync()
    {
        string userName = System.Environment.UserName;
        Console.WriteLine("Logged in user: " + userName);
    }

    public void GetFolderFiles(string Id)
    {
        driveFolderFiles = GetDriveFolderFiles(Id);
        driveFiles = GetDriveFiles(Id);

    }

    public void DownloadFile(string Id, string mimType)
    {
        var credatials = GetCredential();

        //var service = GetDriveService(credatials, ApplicationName);
        var service = GetDriveService(credatials, ApplicationName);

        var file = service.Files.Get(Id).Execute();

        var request = file.ExportLinks["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"];

        var xlsxBytes = service.HttpClient.GetByteArrayAsync(downloadUrl).Result;

    //    request.MediaDownloader.ProgressChanged += (IDownloadProgress progress) =>
    //{
    //    switch (progress.Status)
    //    {
    //        case DownloadStatus.Downloading:
    //            {
    //                Console.WriteLine(progress.BytesDownloaded);
    //                break;
    //            }
    //        case DownloadStatus.Completed:
    //            {
    //                Console.WriteLine("Download complete.");
    //                break;
    //            }
    //        case DownloadStatus.Failed:
    //            {
    //                Console.WriteLine($"Download failed. {progress.Exception.Message}");
    //                break;
    //            }
    //    }
    //};
    //    var stream = new System.IO.MemoryStream();
    //    //request.Download(new FileStream("C:\\Users\\DataMicron X\\Downloads\\" + $"{Guid.NewGuid()}.csv", FileMode.OpenOrCreate));
    //    request.Download(stream);
        using (var fileStream = new FileStream("C:\\Users\\DataMicron X\\Downloads\\" + $"{Guid.NewGuid()}.xlsx", FileMode.Create, FileAccess.Write))
        {
            stream.Seek(0, SeekOrigin.Begin);
            stream.CopyTo(fileStream);
        };
        
    }

    public UserCredential GetCredential()
    {
        UserCredential credential;

        var stream = new FileStream("credentials.json", FileMode.Open, FileAccess.Read);

        credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                GoogleClientSecrets.Load(stream).Secrets,
                scopes,
                Environment.UserName,
                CancellationToken.None,
                new FileDataStore(CRED_PATH, true)).Result;

        return credential;
    }

    public DriveService GetDriveService(UserCredential credential, string appName)
    {
        return new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = appName
            });
    }
    public SheetsService GetSheetService(UserCredential credential, string appName)
    {
        return new SheetsService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = appName
            });
    }
    

    public List<DriveFile> GetDriveFiles(string Id = "")
    {
        var result = new List<DriveFile>();

        var credential = GetCredential();

        // Create Drive API service.
        var service = GetDriveService(credential, ApplicationName);

        FilesResource.ListRequest listRequest = service.Files.List();

        string query;
        if (!string.IsNullOrEmpty(Id))
            query = $"(mimeType='text/csv' "
             + "or mimeType='application/vnd.google-apps.spreadsheet' "
             + "or mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' "
            + "or mimeType='application/vnd.ms-excel') "
            + $"and ('{Id}' in parents and trashed = false)";
        else
            query = $"mimeType='text/csv' "
            + "or mimeType='application/vnd.ms-excel' "
            + "or mimeType='application/vnd.google-apps.spreadsheet' "
            + "or mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ";

        listRequest.Q = query;

        var fileList = listRequest.Execute();

        foreach (var item in fileList.Files)
        {
            var drive = new DriveFile();
            drive.Id = item.Id;
            drive.Name = item.Name;
            drive.MimeType = item.MimeType;
            drive.Kind = item.Kind;
            result.Add(drive);
        }

        return result;
    }
    
    

    public List<DriveFile> GetDriveFolderFiles(string Id = "")
    {
        var result = new List<DriveFile>();

        var credential = GetCredential();

        // Create Drive API service.
        var service = GetDriveService(credential, ApplicationName);

        FilesResource.ListRequest listRequest = service.Files.List();
        string query;
        if (!string.IsNullOrEmpty(Id))
            query = $"mimeType='application/vnd.google-apps.folder' and '{Id}' in parents and trashed = false";
        else
            query = "mimeType='application/vnd.google-apps.folder'";

        listRequest.Q = query;

        var fileList = listRequest.Execute();

        foreach (var item in fileList.Files)
        {
            var drive = new DriveFile();
            drive.Id = item.Id;
            drive.Name = item.Name;
            drive.MimeType = item.MimeType;
            drive.Kind = item.Kind;
            result.Add(drive);
        }

        return result;
    }

    public void ConnectGoogleDrive()
    {
        driveFiles = GetDriveFiles();
        driveFolderFiles = GetDriveFolderFiles();

    }
}
